# This Dockerfile builds an image for a client_golang example.
#
# Use as (from the root for the client_golang repository):
#    docker build -f Dockerfile -t denny/mytest:v1 .

# Builder image, where we build the example.
FROM golang:1.9.0 AS builder
WORKDIR /go/src/github.com/pivotal-cf/
# Here we copy folder, thus people can test local changes.
# For real CI workflow, we can use git clone
COPY . .
# use go dep to manage package version: https://gist.github.com/subfuzion/12342599e26f5094e4e2d08e9d4ad50d
RUN curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh && \
    # Gopkg.toml is initially generated by "dep init"
    cp Gopkg.toml fluent-bit-out-syslog/Gopkg.toml && \
    dep ensure

# TODO: here is the old way to get go packages. But we can't control package versions
# RUN go get -d -t github.com/pivotal-cf/fluent-bit-out-syslog/cmd...

WORKDIR /go/src/github.com/pivotal-cf/fluent-bit-out-syslog/cmd
RUN go build -buildmode c-shared -o out_syslog.so .

# Final image.
# TODO: If we choose scratch instead of golang:latest as base image, the image size will change from 800MB to 15MB
# FROM scratch
FROM golang:latest
LABEL maintainer "Denny Zhang <denny@dennyzhang.com>"
COPY --from=builder /go/src/github.com/pivotal-cf/fluent-bit-out-syslog/cmd/out_syslog.so .
ENTRYPOINT ["tail", "-f", "/dev/null"]
